/*
 * Copyright (C) 2017 DBC A/S (http://dbc.dk/)
 *
 * This is part of dbc-pg-queue-perftest
 *
 * dbc-pg-queue-perftest is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * dbc-pg-queue-perftest is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package dk.dbc.pgqueue.perftest;

import dk.dbc.pgqueue.PreparedQueueSupplier;
import dk.dbc.pgqueue.QueueSupplier;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.util.UUID;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import javax.sql.DataSource;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static dk.dbc.pgqueue.perftest.Util.*;

/**
 *
 * @author DBC {@literal <dbc.dk>}
 */
public class Load {

    private static final Logger log = LoggerFactory.getLogger(Load.class);

    private final String databaseUrl;
    private final int count;
    private final int commit;
    private final String uuid;
    private final int parallel;
    private final DataSource dataSource;
    private final String queue;
    private final AtomicLong counter = new AtomicLong(0);

    public Load(String[] args) throws ExitException, URISyntaxException {
        Options options = new Options();
        options.addOption(Option.builder("h")
                .longOpt("help")
                .hasArg()
                .desc("This lot")
                .build());
        options.addOption(Option.builder("d")
                .longOpt("db")
                .hasArg()
                .argName("URL")
                .desc("Database to connect to (user:pass@host[:port]/database)")
                .required()
                .build());
        options.addOption(Option.builder("q")
                .longOpt("queue")
                .hasArg()
                .argName("NAME")
                .desc("Name of queue to use (default: a)")
                .build());
        options.addOption(Option.builder("c")
                .longOpt("count")
                .hasArg()
                .argName("COUNT")
                .desc("Number of rows (default: 1)")
                .type(Number.class)
                .build());
        options.addOption(Option.builder()
                .longOpt("commit")
                .hasArg()
                .argName("COMMIT")
                .desc("Commit every <COMMIT> rows (default: 10000)")
                .type(Number.class)
                .build());
        options.addOption(Option.builder("j")
                .longOpt("parallel")
                .hasArg()
                .argName("PARALLEL")
                .desc("Number of threads (default: 1)")
                .type(Number.class)
                .build());
        options.addOption(Option.builder("u")
                .longOpt("uuid")
                .hasArg()
                .argName("UUID")
                .desc("Some string (default <autogenerated>)")
                .build());

        try {
            CommandLine arguments = new DefaultParser().parse(options, args);
            if (arguments.hasOption('h')) {
                usage(options);
                throw new ExitException(0);
            }
            this.databaseUrl = arguments.getOptionValue("db");
            this.dataSource = database(databaseUrl);

            this.queue = arguments.getOptionValue("queue", "a");
            this.uuid = arguments.getOptionValue("uuid", UUID.randomUUID().toString());

            this.count = getArgumentInt(arguments, "count", 1, 1);
            this.commit = getArgumentInt(arguments, "commit", 10_000, 1);
            this.parallel = getArgumentInt(arguments, "parallel", 1, 1);
        } catch (ParseException ex) {
            System.err.println(ex.getMessage());
            usage(options);
            throw new ExitException(0);
        }
    }

    void run() throws Exception {

        ExecutorService executor = Executors.newFixedThreadPool(parallel);

        for (int i = 0 ; i < parallel ; i++) {
            executor.execute(this::thread);
        }
        executor.shutdown();
        executor.awaitTermination(365, TimeUnit.DAYS);
    }

    public void thread() {
        try {
            int commitCounter = 0;
            int rows = 0;
            long lastNumber = 0;
            try (Connection connection = dataSource.getConnection() ;
                 PreparedQueueSupplier queueSupplier = new QueueSupplier(STORAGE_ABSTRACTION).preparedSupplier(connection)) {
                log.info("Got connection");
                for (;;) {
                    long number = counter.incrementAndGet();
                    if (number > count) {
                        break;
                    }
                    lastNumber = number;

                    queueSupplier.enqueue(queue, new Job(uuid, number));

                    ++rows;
                    if (rows % 1000 == 0) {
                        log.info("rows in this thread: {} actual row: {}", rows, number);
                    }
                    if (++commitCounter >= commit) {
                        connection.commit();
                        log.info("committed - rows: {}", rows);
                        commitCounter = 0;
                    }
                }
                if (commitCounter > 0) {
                    connection.commit();
                    log.info("committed - rows: {}", rows);
                }
            }
            log.info("rows in this thread: {} actual row: {}", rows, lastNumber);
        } catch (Exception ex) {
            log.error("Error: {}", ex.getMessage());
            log.debug("Error:", ex);
        }

    }

    private void usage(Options options) {
        new HelpFormatter().printHelp(Main.PROGNAME + " load [...]", options);
    }

}
